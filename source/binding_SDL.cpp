#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <malloc.h>
#include <math.h>
#include <gccore.h>
#include <string.h>

#include <SDL/SDL.h>

#include "lua_util.h"




template<> void luaPushValue<SDL_bool>(lua_State *L, const SDL_bool &returnValue) { lua_pushboolean(L, returnValue != 0); }

template<> void luaPushValue<SDLMod>(lua_State *L, const SDLMod &returnValue) { lua_pushinteger(L, returnValue); }
template<> void luaPushValue<SDL_audiostatus>(lua_State *L, const SDL_audiostatus &returnValue) { lua_pushinteger(L, returnValue); }
template<> void luaPushValue<SDL_GrabMode>(lua_State *L, const SDL_GrabMode &returnValue) { lua_pushinteger(L, returnValue); }

template<> void luaPushValue<SDL_AudioSpec*>(lua_State *L, SDL_AudioSpec* const& returnValue) { FFI_CAST("SDL_AudioSpec*", returnValue); }
template<> void luaPushValue<SDL_AudioCVT*>(lua_State *L, SDL_AudioCVT* const& returnValue) { FFI_CAST("SDL_AudioCVT*", returnValue); }
template<> void luaPushValue<SDL_Cursor*>(lua_State *L, SDL_Cursor* const& returnValue) { FFI_CAST("SDL_Cursor*", returnValue); }
template<> void luaPushValue<SDL_Overlay*>(lua_State *L, SDL_Overlay* const& returnValue) { FFI_CAST("SDL_Overlay*", returnValue); }
template<> void luaPushValue<SDL_Surface*>(lua_State *L, SDL_Surface* const& returnValue) { FFI_CAST("SDL_Surface*", returnValue); }
template<> void luaPushValue<SDL_version*>(lua_State *L, SDL_version* const& returnValue) { FFI_CAST("SDL_version*", returnValue); }
template<> void luaPushValue<SDL_version const*>(lua_State *L, SDL_version const* const& returnValue) { FFI_CAST("SDL_version const*", (SDL_version *)returnValue); }		//note that const pointers have to be un-const'd as they are passed to FFI_CAST
template<> void luaPushValue<SDL_VideoInfo const*>(lua_State *L, SDL_VideoInfo const* const& returnValue) { FFI_CAST("SDL_VideoInfo const*", (SDL_VideoInfo *)returnValue); }		//note that const pointers have to be un-const'd as they are passed to FFI_CAST
template<> void luaPushValue<_SDL_Joystick*>(lua_State *L, _SDL_Joystick* const& returnValue) { FFI_CAST("_SDL_Joystick*", returnValue); }


template<> SDLKey luaGetValue<SDLKey>(lua_State *L, int i) { return (SDLKey)lua_tointeger(L,i); }
template<> SDLMod luaGetValue<SDLMod>(lua_State *L, int i) { return (SDLMod)lua_tointeger(L,i); }
template<> SDL_eventaction luaGetValue<SDL_eventaction>(lua_State *L, int i) { return (SDL_eventaction)lua_tointeger(L,i); }
template<> SDL_GLattr luaGetValue<SDL_GLattr>(lua_State *L, int i) { return (SDL_GLattr)lua_tointeger(L,i); }
template<> SDL_GrabMode luaGetValue<SDL_GrabMode>(lua_State *L, int i) { return (SDL_GrabMode)lua_tointeger(L,i); }

template<> SDL_AudioCVT* luaGetValue<SDL_AudioCVT*>(lua_State *L, int i) { return cdataToPtr<SDL_AudioCVT*>(L,i); }
template<> SDL_AudioSpec* luaGetValue<SDL_AudioSpec*>(lua_State *L, int i) { return cdataToPtr<SDL_AudioSpec*>(L,i); }
template<> SDL_Cursor* luaGetValue<SDL_Cursor*>(lua_State *L, int i) { return cdataToPtr<SDL_Cursor*>(L,i); }
template<> SDL_Event* luaGetValue<SDL_Event*>(lua_State *L, int i) { return cdataToPtr<SDL_Event*>(L,i); }
template<> SDL_Overlay* luaGetValue<SDL_Overlay*>(lua_State *L, int i) { return cdataToPtr<SDL_Overlay*>(L,i); }
template<> SDL_PixelFormat* luaGetValue<SDL_PixelFormat*>(lua_State *L, int i) { return cdataToPtr<SDL_PixelFormat*>(L,i); }
template<> SDL_PixelFormat const* luaGetValue<SDL_PixelFormat const*>(lua_State *L, int i) { return cdataToPtr<SDL_PixelFormat const*>(L,i); }
template<> SDL_Rect* luaGetValue<SDL_Rect*>(lua_State *L, int i) { return cdataToPtr<SDL_Rect*>(L,i); }
template<> SDL_Rect const* luaGetValue<SDL_Rect const*>(lua_State *L, int i) { return cdataToPtr<SDL_Rect const*>(L,i); }
template<> SDL_RWops* luaGetValue<SDL_RWops*>(lua_State *L, int i) { return cdataToPtr<SDL_RWops*>(L,i); }
template<> SDL_Surface* luaGetValue<SDL_Surface*>(lua_State *L, int i) { return cdataToPtr<SDL_Surface*>(L,i); }
template<> _SDL_iconv_t* luaGetValue<_SDL_iconv_t*>(lua_State *L, int i) { return cdataToPtr<_SDL_iconv_t*>(L,i); }
template<> _SDL_Joystick* luaGetValue<_SDL_Joystick*>(lua_State *L, int i) { return cdataToPtr<_SDL_Joystick*>(L,i); }
template<> _SDL_TimerID* luaGetValue<_SDL_TimerID*>(lua_State *L, int i) { return cdataToPtr<_SDL_TimerID*>(L,i); }



//in my SDL ffi header but not my Wii SDL header
//I think my ffi is of a higher version ...
typedef unsigned long        SDL_threadID;

//templates are hassling me ... i'm just going to convert all types to friendly names
//and store their info in associated classes

BINDFUNC(void*                 ,SDL_malloc, size_t );
BINDFUNC(void*                 ,SDL_calloc, size_t , size_t );
BINDFUNC(void*                 ,SDL_realloc, void* , size_t );
BINDFUNC(void                  ,SDL_free, void* );
BINDFUNC(char*                 ,SDL_getenv, const char *);
//BINDFUNC(int                   ,SDL_setenv, const char *, const char *, int );
//BINDFUNC(void                  ,SDL_qsort, void* , size_t , size_t , int (*) (const void *, const void *) );
BINDFUNC(void*                 ,SDL_memset, void* , int , size_t );
BINDFUNC(void*                 ,SDL_memcpy, void* , const void *, size_t );
BINDFUNC(void*                 ,SDL_memmove, void* , const void *, size_t );
BINDFUNC(int                   ,SDL_memcmp, const void *, const void *, size_t );
BINDFUNC(size_t                ,SDL_strlen, const char* );
//BINDFUNC(size_t                ,SDL_wcslen, const wchar_t* );
//BINDFUNC(size_t                ,SDL_wcslcpy, wchar_t* , const wchar_t *, size_t );
//BINDFUNC(size_t                ,SDL_wcslcat, wchar_t* , const wchar_t *, size_t );
//BINDFUNC(size_t                ,SDL_strlcpy, char* , const char *, size_t );
//BINDFUNC(size_t                ,SDL_utf8strlcpy, char* , const char *, size_t );
//BINDFUNC(size_t                ,SDL_strlcat, char* , const char *, size_t );
BINDFUNC(char*                 ,SDL_strdup, const char* );
BINDFUNC(char*                 ,SDL_strrev, char* );
BINDFUNC(char*                 ,SDL_strupr, char* );
BINDFUNC(char*                 ,SDL_strlwr, char* );
//BINDFUNC(char*                 ,SDL_strchr, const char* , int );
//BINDFUNC(char*                 ,SDL_strrchr, const char* , int );
//BINDFUNC(char*                 ,SDL_strstr, const char* , const char* );
//BINDFUNC(char*                 ,SDL_ltoa, long , char* , int );
//BINDFUNC(char*                 ,SDL_ultoa, unsigned long , char* , int );
//BINDFUNC(long                  ,SDL_strtol, const char* , char** , int );
//BINDFUNC(unsigned long         ,SDL_strtoul, const char* , char** , int );
//BINDFUNC(char*                 ,SDL_lltoa, int64_t  , char* , int );
//BINDFUNC(char*                 ,SDL_ulltoa, Uint64 , char* , int );
//BINDFUNC(int64_t               ,SDL_strtoll, const char* , char** , int );
//BINDFUNC(Uint64              ,SDL_strtoull, const char* , char** , int );
//BINDFUNC(double                ,SDL_strtod, const char* , char** );
//BINDFUNC(int                   ,SDL_strcmp, const char* , const char* );
//BINDFUNC(int                   ,SDL_strncmp, const char* , const char* , size_t );
//BINDFUNC(int                   ,SDL_strcasecmp, const char* , const char* );
//BINDFUNC(int                   ,SDL_strncasecmp, const char* , const char* , size_t );
//BINDFUNC(int                   ,SDL_sscanf, const char* , const char* , ... );
//BINDFUNC(int                   ,SDL_snprintf, char* , size_t , const char* , ... );
//BINDFUNC(int                   ,SDL_vsnprintf, char* , size_t , const char* , va_list );
//BINDFUNC(double                ,SDL_atan, double );
//BINDFUNC(double                ,SDL_atan2, double , double );
//BINDFUNC(double                ,SDL_copysign, double , double );
//BINDFUNC(double                ,SDL_cos, double );
//BINDFUNC(double                ,SDL_fabs, double );
//BINDFUNC(double                ,SDL_floor, double );
//BINDFUNC(double                ,SDL_log, double );
//BINDFUNC(double                ,SDL_pow, double , double );
//BINDFUNC(double                ,SDL_scalbn, double , int );
//BINDFUNC(double                ,SDL_sin, double );
//BINDFUNC(double                ,SDL_sqrt, double );
//BINDFUNC(SDL_iconv_t           ,SDL_iconv_open, const char* , const char* );
BINDFUNC(int                   ,SDL_iconv_close, SDL_iconv_t );
BINDFUNC(size_t                ,SDL_iconv, SDL_iconv_t , const char** , size_t* , char** , size_t* );
BINDFUNC(char*                 ,SDL_iconv_string, const char* , const char* , const char* , size_t );
//BINDFUNC(int                   ,SDL_main, int , char **);
//BINDFUNC(int                   ,SDL_RegisterApp, char *, Uint32 , void *);
//BINDFUNC(void                  ,SDL_UnregisterApp);
//BINDFUNC(const char*           ,SDL_GetPlatform);
//BINDFUNC(SDL_assert_state      ,SDL_ReportAssertion,      SDL_assert_data *, const char *, const char *, int);
//BINDFUNC(void                  ,SDL_SetAssertionHandler, SDL_AssertionHandler , void *);
//BINDFUNC(const SDL_assert_data*,SDL_GetAssertionReport);
//BINDFUNC(void                  ,SDL_ResetAssertionReport);
//BINDFUNC(SDL_Thread*           ,SDL_CreateThread, SDL_ThreadFunction , void *, pfnSDL_CurrentBeginThread , pfnSDL_CurrentEndThread );
//BINDFUNC(SDL_threadID          ,SDL_ThreadID);
//BINDFUNC(SDL_threadID          ,SDL_GetThreadID, SDL_Thread* );
//BINDFUNC(int                   ,SDL_SetThreadPriority, SDL_ThreadPriority );
//BINDFUNC(void                  ,SDL_WaitThread, SDL_Thread* , int* );
//BINDFUNC(SDL_RWops*            ,SDL_RWFromFile, const char* , const char* );
//BINDFUNC(SDL_RWops*            ,SDL_RWFromFP, void* , SDL_bool );
//BINDFUNC(SDL_RWops*            ,SDL_RWFromMem, void* , int );
//BINDFUNC(SDL_RWops*            ,SDL_RWFromConstMem, const void* , int );
//BINDFUNC(SDL_RWops*            ,SDL_AllocRW);
//BINDFUNC(void                  ,SDL_FreeRW, SDL_RWops* );
//BINDFUNC(Uint16              ,SDL_ReadLE16, SDL_RWops* src );
//BINDFUNC(Uint16              ,SDL_ReadBE16, SDL_RWops* src );
//BINDFUNC(Uint32              ,SDL_ReadLE32, SDL_RWops* src );
//BINDFUNC(Uint32              ,SDL_ReadBE32, SDL_RWops* src );
//BINDFUNC(Uint64              ,SDL_ReadLE64, SDL_RWops* src );
//BINDFUNC(Uint64              ,SDL_ReadBE64, SDL_RWops* src );
//BINDFUNC(size_t                ,SDL_WriteLE16, SDL_RWops * , Uint16 );
//BINDFUNC(size_t                ,SDL_WriteBE16, SDL_RWops * , Uint16 );
//BINDFUNC(size_t                ,SDL_WriteLE32, SDL_RWops * , Uint32 );
//BINDFUNC(size_t                ,SDL_WriteBE32, SDL_RWops * , Uint32 );
//BINDFUNC(size_t                ,SDL_WriteLE64, SDL_RWops * , Uint64 );
//BINDFUNC(size_t                ,SDL_WriteBE64, SDL_RWops * , Uint64 );
//BINDFUNC(int                   ,SDL_GetNumAudioDrivers);
//BINDFUNC(const char*           ,SDL_GetAudioDriver, int );
BINDFUNC(int                   ,SDL_AudioInit, const char *);
BINDFUNC(void                  ,SDL_AudioQuit);
//BINDFUNC(const char*           ,SDL_GetCurrentAudioDriver);
BINDFUNC(int                   ,SDL_OpenAudio, SDL_AudioSpec* , SDL_AudioSpec* );
//BINDFUNC(int                   ,SDL_GetNumAudioDevices, int );
//BINDFUNC(const char*           ,SDL_GetAudioDeviceName, int , int );
//BINDFUNC(SDL_AudioDeviceID     ,SDL_OpenAudioDevice, const char* , int , const SDL_AudioSpec* , SDL_AudioSpec *, int );
BINDFUNC(SDL_audiostatus       ,SDL_GetAudioStatus);
//BINDFUNC(SDL_audiostatus       ,SDL_GetAudioDeviceStatus, SDL_AudioDeviceID );
BINDFUNC(void                  ,SDL_PauseAudio, int );
//BINDFUNC(void                  ,SDL_PauseAudioDevice, SDL_AudioDeviceID , int );
BINDFUNC(SDL_AudioSpec*        ,SDL_LoadWAV_RW, SDL_RWops* , int , SDL_AudioSpec* , Uint8** , Uint32* );
BINDFUNC(void                  ,SDL_FreeWAV, Uint8* );
//BINDFUNC(int                   ,SDL_BuildAudioCVT, SDL_AudioCVT* , SDL_AudioFormat , Uint8 , int , SDL_AudioFormat , Uint8 , int );
BINDFUNC(int                   ,SDL_ConvertAudio, SDL_AudioCVT* );
BINDFUNC(void                  ,SDL_MixAudio, Uint8* , const Uint8* , Uint32 , int );
//BINDFUNC(void                  ,SDL_MixAudioFormat, Uint8* , const Uint8* , SDL_AudioFormat , Uint32 , int );
BINDFUNC(void                  ,SDL_LockAudio);
//BINDFUNC(void                  ,SDL_LockAudioDevice, SDL_AudioDeviceID );
BINDFUNC(void                  ,SDL_UnlockAudio);
//BINDFUNC(void                  ,SDL_UnlockAudioDevice, SDL_AudioDeviceID );
BINDFUNC(void                  ,SDL_CloseAudio);
//BINDFUNC(void                  ,SDL_CloseAudioDevice, SDL_AudioDeviceID );
//BINDFUNC(int                   ,SDL_AudioDeviceConnected, SDL_AudioDeviceID );
//BINDFUNC(int                   ,SDL_SetClipboardText, const char *);
//BINDFUNC(char*                 ,SDL_GetClipboardText);
//BINDFUNC(SDL_bool              ,SDL_HasClipboardText);
//BINDFUNC(int                   ,SDL_GetCPUCount);
//BINDFUNC(int                   ,SDL_GetCPUCacheLineSize);
BINDFUNC(SDL_bool              ,SDL_HasRDTSC);
BINDFUNC(SDL_bool              ,SDL_HasAltiVec);
BINDFUNC(SDL_bool              ,SDL_HasMMX);
BINDFUNC(SDL_bool              ,SDL_Has3DNow);
BINDFUNC(SDL_bool              ,SDL_HasSSE);
BINDFUNC(SDL_bool              ,SDL_HasSSE2);
//BINDFUNC(SDL_bool              ,SDL_HasSSE3);
//BINDFUNC(SDL_bool              ,SDL_HasSSE41);
//BINDFUNC(SDL_bool              ,SDL_HasSSE42);
//BINDFUNC(const char*           ,SDL_GetPixelFormatName, Uint32 );
//BINDFUNC(SDL_bool              ,SDL_PixelFormatEnumToMasks, Uint32 , int *, Uint32 * , Uint32 * , Uint32 * , Uint32 * ); 
//BINDFUNC(Uint32              ,SDL_MasksToPixelFormatEnum, int , Uint32 , Uint32 , Uint32 , Uint32 ); 
//BINDFUNC(SDL_PixelFormat*      ,SDL_AllocFormat, Uint32 );
//BINDFUNC(void                  ,SDL_FreeFormat, SDL_PixelFormat *);
//BINDFUNC(SDL_Palette*          ,SDL_AllocPalette, int );
//BINDFUNC(int                   ,SDL_SetPixelFormatPalette, SDL_PixelFormat * , SDL_Palette *);
//BINDFUNC(int                   ,SDL_SetPaletteColors, SDL_Palette*, const SDL_Color* , int , int ncolors);
//BINDFUNC(void                  ,SDL_FreePalette,   SDL_Palette* );
BINDFUNC(Uint32              ,SDL_MapRGB,  const SDL_PixelFormat*, Uint8 , Uint8 , Uint8 );
BINDFUNC(Uint32              ,SDL_MapRGBA, const SDL_PixelFormat*, Uint8 , Uint8 , Uint8 , Uint8 );
BINDFUNC(void                  ,SDL_GetRGB, Uint32 , SDL_PixelFormat* , Uint8* , Uint8* , Uint8* );
BINDFUNC(void                  ,SDL_GetRGBA, Uint32 , SDL_PixelFormat* , Uint8* , Uint8* , Uint8* , Uint8* );
//BINDFUNC(void                  ,SDL_CalculateGammaRamp, float , Uint16* );
//BINDFUNC(SDL_bool              ,SDL_HasIntersection, const SDL_Rect*  , const SDL_Rect * );
//BINDFUNC(SDL_bool              ,SDL_IntersectRect, const SDL_Rect*  , const SDL_Rect * , SDL_Rect* );
//BINDFUNC(void                  ,SDL_UnionRect, const SDL_Rect*  , const SDL_Rect * , SDL_Rect* );
//BINDFUNC(SDL_bool              ,SDL_EnclosePoints, const SDL_Point* , int , const SDL_Rect* , SDL_Rect* );
//BINDFUNC(SDL_bool              ,SDL_IntersectRectAndLine, const SDL_Rect*  , int *, int *, int *, int *);
BINDFUNC(SDL_Surface*,SDL_CreateRGBSurface, Uint32 , int , int , int , Uint32 , Uint32 , Uint32 , Uint32 );
BINDFUNC(SDL_Surface*,SDL_CreateRGBSurfaceFrom, void *, int , int , int , int , Uint32 , Uint32 , Uint32 , Uint32 );
BINDFUNC(void        ,SDL_FreeSurface,          SDL_Surface* );
//BINDFUNC(int         ,SDL_SetSurfacePalette,    SDL_Surface*, SDL_Palette* ); 
BINDFUNC(int         ,SDL_LockSurface,          SDL_Surface* );
BINDFUNC(void        ,SDL_UnlockSurface,        SDL_Surface* );
BINDFUNC(SDL_Surface*,SDL_LoadBMP_RW, SDL_RWops* , int ); 
BINDFUNC(int         ,SDL_SaveBMP_RW,           SDL_Surface*, SDL_RWops* , int );
//BINDFUNC(int         ,SDL_SetSurfaceRLE,        SDL_Surface*, int );
BINDFUNC(int         ,SDL_SetColorKey,          SDL_Surface*, Uint32 , Uint32  );
//BINDFUNC(int         ,SDL_GetColorKey,          SDL_Surface*, Uint32* );
//BINDFUNC(int         ,SDL_SetSurfaceColorMod,   SDL_Surface*, Uint8  , Uint8  , Uint8  );
//BINDFUNC(int         ,SDL_GetSurfaceColorMod,   SDL_Surface*, Uint8 *, Uint8* , Uint8* );
//BINDFUNC(int         ,SDL_SetSurfaceAlphaMod,   SDL_Surface*, Uint8  ); 
//BINDFUNC(int         ,SDL_GetSurfaceAlphaMod,   SDL_Surface*, Uint8* ); 
//BINDFUNC(int         ,SDL_SetSurfaceBlendMode,  SDL_Surface*, SDL_BlendMode  );
//BINDFUNC(int         ,SDL_GetSurfaceBlendMode,  SDL_Surface*, SDL_BlendMode* ); 
BINDFUNC(SDL_bool    ,SDL_SetClipRect,          SDL_Surface*, const SDL_Rect* );
BINDFUNC(void        ,SDL_GetClipRect,          SDL_Surface*, SDL_Rect* ); 
BINDFUNC(SDL_Surface*,SDL_ConvertSurface,       SDL_Surface*, SDL_PixelFormat* , Uint32 );
//BINDFUNC(SDL_Surface*,SDL_ConvertSurfaceFormat, SDL_Surface*, Uint32 , Uint32 ); 
BINDFUNC(int         ,SDL_FillRect,             SDL_Surface*, SDL_Rect* , Uint32 );
//BINDFUNC(int         ,SDL_FillRects,            SDL_Surface*, const SDL_Rect* , int , Uint32 );
BINDFUNC(int         ,SDL_UpperBlit, SDL_Surface* , SDL_Rect* , SDL_Surface* , SDL_Rect* );
BINDFUNC(int         ,SDL_LowerBlit, SDL_Surface* , SDL_Rect* , SDL_Surface* , SDL_Rect* );
BINDFUNC(int         ,SDL_SoftStretch, SDL_Surface* , SDL_Rect* , SDL_Surface* , SDL_Rect* );
//BINDFUNC(int         ,SDL_UpperBlitScaled, SDL_Surface* , const SDL_Rect* , SDL_Surface* , SDL_Rect* ); 
//BINDFUNC(int         ,SDL_LowerBlitScaled, SDL_Surface* , SDL_Rect* , SDL_Surface* , SDL_Rect* );
//BINDFUNC(int         ,SDL_ConvertPixels, int , int , Uint32 , const void* , int , Uint32 , void* , int );
//BINDFUNC(int             ,SDL_GetNumVideoDrivers);
//BINDFUNC(const char*     ,SDL_GetVideoDriver, int ); 
//BINDFUNC(int             ,SDL_VideoInit, const char *); 
//BINDFUNC(void            ,SDL_VideoQuit); 
//BINDFUNC(const char*     ,SDL_GetCurrentVideoDriver); 
//BINDFUNC(int             ,SDL_GetNumVideoDisplays); 
//BINDFUNC(int             ,SDL_GetDisplayBounds, int , SDL_Rect * );
//BINDFUNC(int             ,SDL_GetNumDisplayModes, int ); 
//BINDFUNC(int             ,SDL_GetDisplayMode, int , int , SDL_DisplayMode * );
//BINDFUNC(int             ,SDL_GetDesktopDisplayMode, int , SDL_DisplayMode * ); 
//BINDFUNC(int             ,SDL_GetCurrentDisplayMode, int , SDL_DisplayMode * ); 
//BINDFUNC(SDL_DisplayMode*,SDL_GetClosestDisplayMode, int , const SDL_DisplayMode * , SDL_DisplayMode * );
//BINDFUNC(int           ,SDL_GetWindowDisplay,         SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowDisplayMode,     SDL_Window*, const SDL_DisplayMode* );
//BINDFUNC(int           ,SDL_GetWindowDisplayMode,     SDL_Window*,       SDL_DisplayMode* );
//BINDFUNC(Uint32      ,SDL_GetWindowPixelFormat,     SDL_Window*  );
//BINDFUNC(SDL_Window*   ,SDL_CreateWindow, const char* , int , int , int , int , Uint32 );
//BINDFUNC(SDL_Window*   ,SDL_CreateWindowFrom, const void*  );
//BINDFUNC(Uint32      ,SDL_GetWindowID,              SDL_Window*  );
//BINDFUNC(SDL_Window*   ,SDL_GetWindowFromID, Uint32 id );
//BINDFUNC(Uint32      ,SDL_GetWindowFlags,           SDL_Window*  );
//BINDFUNC(void          ,SDL_SetWindowTitle,           SDL_Window*, const char* );
//BINDFUNC(const char*   ,SDL_GetWindowTitle,           SDL_Window*  );
//BINDFUNC(void          ,SDL_SetWindowIcon,            SDL_Window*, SDL_Surface* );
//BINDFUNC(void*         ,SDL_SetWindowData,            SDL_Window*, const char* , void* );
//BINDFUNC(void*         ,SDL_GetWindowData,            SDL_Window*, const char* );
//BINDFUNC(void          ,SDL_SetWindowPosition,        SDL_Window*, int  , int  );
//BINDFUNC(void          ,SDL_GetWindowPosition,        SDL_Window*, int* , int* );
//BINDFUNC(void          ,SDL_SetWindowSize,            SDL_Window*, int  , int  );
//BINDFUNC(void          ,SDL_GetWindowSize,            SDL_Window*, int *, int *);
//BINDFUNC(void          ,SDL_ShowWindow,               SDL_Window*  );
//BINDFUNC(void          ,SDL_HideWindow,               SDL_Window*  );
//BINDFUNC(void          ,SDL_RaiseWindow,              SDL_Window*  );
//BINDFUNC(void          ,SDL_MaximizeWindow,           SDL_Window*  );
//BINDFUNC(void          ,SDL_MinimizeWindow,           SDL_Window*  );
//BINDFUNC(void          ,SDL_RestoreWindow,            SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowFullscreen,      SDL_Window*, SDL_bool );
//BINDFUNC(SDL_Surface*  ,SDL_GetWindowSurface,         SDL_Window*  );
//BINDFUNC(int           ,SDL_UpdateWindowSurface,      SDL_Window*  );
//BINDFUNC(int           ,SDL_UpdateWindowSurfaceRects, SDL_Window*, SDL_Rect * , int );
//BINDFUNC(void          ,SDL_SetWindowGrab,            SDL_Window*, SDL_bool );
//BINDFUNC(SDL_bool      ,SDL_GetWindowGrab,            SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowBrightness,      SDL_Window*, float );
//BINDFUNC(float         ,SDL_GetWindowBrightness,      SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowGammaRamp,       SDL_Window*, const Uint16*,const Uint16*,const Uint16*);
//BINDFUNC(int           ,SDL_GetWindowGammaRamp,       SDL_Window*,       Uint16*,      Uint16*,      Uint16*);
//BINDFUNC(void          ,SDL_DestroyWindow,            SDL_Window* );
//BINDFUNC(SDL_bool      ,SDL_IsScreenSaverEnabled);
//BINDFUNC(void          ,SDL_EnableScreenSaver);
//BINDFUNC(void          ,SDL_DisableScreenSaver);
BINDFUNC(int            ,SDL_GL_LoadLibrary, const char *);
BINDFUNC(void*          ,SDL_GL_GetProcAddress, const char *);
//BINDFUNC(void           ,SDL_GL_UnloadLibrary);
//BINDFUNC(SDL_bool       ,SDL_GL_ExtensionSupported, const char* );
BINDFUNC(int            ,SDL_GL_SetAttribute, SDL_GLattr , int );
BINDFUNC(int            ,SDL_GL_GetAttribute, SDL_GLattr , int *);
//BINDFUNC(SDL_GLContext  ,SDL_GL_CreateContext, SDL_Window* );
//BINDFUNC(int            ,SDL_GL_MakeCurrent, SDL_Window * , SDL_GLContext );
//BINDFUNC(int            ,SDL_GL_SetSwapInterval, int );		//TODO ADD THIS TO WII SDL
//BINDFUNC(int            ,SDL_GL_GetSwapInterval);
//BINDFUNC(void           ,SDL_GL_SwapWindow, SDL_Window * );
//BINDFUNC(void           ,SDL_GL_DeleteContext, SDL_GLContext );
//BINDFUNC(SDL_Window*    ,SDL_GetKeyboardFocus);
//BINDFUNC(Uint8*       ,SDL_GetKeyboardState, int *);			//TODO either this too, or just rewrite the lua code to use events
BINDFUNC(SDLMod     ,SDL_GetModState);
BINDFUNC(void           ,SDL_SetModState, SDLMod );
//BINDFUNC(SDLKey    ,SDL_GetKeyFromScancode, SDL_Scancode );
//BINDFUNC(SDL_Scancode   ,SDL_GetScancodeFromKey, SDLKey );
//BINDFUNC(const char*    ,SDL_GetScancodeName, SDL_Scancode );
BINDFUNC(char*    ,SDL_GetKeyName, SDLKey );
//BINDFUNC(void           ,SDL_StartTextInput);
//BINDFUNC(void           ,SDL_StopTextInput);
//BINDFUNC(void           ,SDL_SetTextInputRect, SDL_Rect *);
//BINDFUNC(SDL_Window*    ,SDL_GetMouseFocus);
BINDFUNC(Uint8        ,SDL_GetMouseState, int *, int *);
BINDFUNC(Uint8        ,SDL_GetRelativeMouseState, int *, int *);
//BINDFUNC(void           ,SDL_WarpMouseInWindow, SDL_Window * , int , int );
//BINDFUNC(int            ,SDL_SetRelativeMouseMode, SDL_bool );
//BINDFUNC(SDL_bool       ,SDL_GetRelativeMouseMode);
//BINDFUNC(SDL_Cursor*    ,SDL_CreateCursor, const Uint8 * , const Uint8* , int , int , int , int ); 
//BINDFUNC(SDL_Cursor*    ,SDL_CreateColorCursor,  SDL_Surface*, int , int ); 
BINDFUNC(void           ,SDL_SetCursor,          SDL_Cursor* );
BINDFUNC(SDL_Cursor*    ,SDL_GetCursor);
BINDFUNC(void           ,SDL_FreeCursor,         SDL_Cursor* );
BINDFUNC(int            ,SDL_ShowCursor, int );
BINDFUNC(int            ,SDL_NumJoysticks);
BINDFUNC(void           ,SDL_JoystickUpdate);
BINDFUNC(int            ,SDL_JoystickEventState, int);
BINDFUNC(const char*    ,SDL_JoystickName, int );
BINDFUNC(SDL_Joystick*  ,SDL_JoystickOpen, int );
BINDFUNC(int            ,SDL_JoystickOpened, int );
BINDFUNC(int            ,SDL_JoystickIndex,      SDL_Joystick* );
BINDFUNC(int            ,SDL_JoystickNumAxes,    SDL_Joystick* );
BINDFUNC(int            ,SDL_JoystickNumBalls,   SDL_Joystick* );
BINDFUNC(int            ,SDL_JoystickNumHats,    SDL_Joystick* );
BINDFUNC(int            ,SDL_JoystickNumButtons, SDL_Joystick* );
BINDFUNC(int16_t        ,SDL_JoystickGetAxis,    SDL_Joystick*, int );
BINDFUNC(Uint8        ,SDL_JoystickGetHat,     SDL_Joystick*, int ); 
BINDFUNC(int            ,SDL_JoystickGetBall,    SDL_Joystick*, int , int *, int *); 
BINDFUNC(Uint8        ,SDL_JoystickGetButton,  SDL_Joystick*, int ); 
BINDFUNC(void           ,SDL_JoystickClose,      SDL_Joystick* );
//BINDFUNC(SDL_Touch*     ,SDL_GetTouch, SDL_TouchID );
//BINDFUNC(SDL_Finger*    ,SDL_GetFinger, SDL_Touch *, SDL_FingerID );
//BINDFUNC(int            ,SDL_RecordGesture, SDL_TouchID );
//BINDFUNC(int            ,SDL_SaveAllDollarTemplates, SDL_RWops *);
//BINDFUNC(int            ,SDL_SaveDollarTemplate, SDL_GestureID , SDL_RWops *);
//BINDFUNC(int            ,SDL_LoadDollarTemplates, SDL_TouchID , SDL_RWops *);
BINDFUNC(void           ,SDL_PumpEvents);
BINDFUNC(int            ,SDL_PeepEvents, SDL_Event* , int , SDL_eventaction , Uint32); 
//BINDFUNC(SDL_bool       ,SDL_HasEvent, Uint32 );
//BINDFUNC(SDL_bool       ,SDL_HasEvents, Uint32 , Uint32 ); 
//BINDFUNC(void           ,SDL_FlushEvent, Uint32 );
//BINDFUNC(void           ,SDL_FlushEvents, Uint32 , Uint32 ); 
BINDFUNC(int            ,SDL_PollEvent, SDL_Event * ); 
BINDFUNC(int            ,SDL_WaitEvent, SDL_Event * ); 
//BINDFUNC(int            ,SDL_WaitEventTimeout, SDL_Event * , int ); 
BINDFUNC(int            ,SDL_PushEvent, SDL_Event * ); 
//BINDFUNC(void           ,SDL_SetEventFilter, SDL_EventFilter); 
//BINDFUNC(int       ,SDL_GetEventFilter, SDL_EventFilter* ); 
//BINDFUNC(void           ,SDL_AddEventWatch, SDL_EventFilter  , void*  ); 
//BINDFUNC(void           ,SDL_DelEventWatch, SDL_EventFilter  , void*  ); 
//BINDFUNC(void           ,SDL_FilterEvents, SDL_EventFilter  , void*  );
BINDFUNC(Uint8        ,SDL_EventState, Uint8 , int );
//BINDFUNC(Uint32       ,SDL_RegisterEvents, int );
//BINDFUNC(SDL_bool       ,SDL_SetHintWithPriority, const char* , const char* , SDL_HintPriority ); 
//BINDFUNC(SDL_bool       ,SDL_SetHint, const char* , const char* ); 
//BINDFUNC(const char*    ,SDL_GetHint, const char* );
//BINDFUNC(void           ,SDL_ClearHints);
BINDFUNC(void*          ,SDL_LoadObject, const char *);
BINDFUNC(void*          ,SDL_LoadFunction, void* , const char* );
BINDFUNC(void           ,SDL_UnloadObject, void* );
//BINDFUNC(void           ,SDL_LogSetAllPriority,   SDL_LogPriority ); 
//BINDFUNC(void           ,SDL_LogSetPriority, int , SDL_LogPriority ); 
//BINDFUNC(SDL_LogPriority,SDL_LogGetPriority, int );
//BINDFUNC(void           ,SDL_LogResetPriorities);
//BINDFUNC(void           ,SDL_Log, const char *, ...);
//BINDFUNC(void           ,SDL_LogVerbose, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogDebug, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogInfo, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogWarn, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogError, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogCritical, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogMessage, int , SDL_LogPriority, const char *, ... );
//BINDFUNC(void           ,SDL_LogMessageV, int , SDL_LogPriority, const char *, va_list );
//BINDFUNC(void           ,SDL_LogGetOutputFunction, SDL_LogOutputFunction *, void **);
//BINDFUNC(void           ,SDL_LogSetOutputFunction, SDL_LogOutputFunction , void *);
//BINDFUNC(SDL_PowerState ,SDL_GetPowerInfo, int *, int *);
//BINDFUNC(int          ,SDL_GetNumRenderDrivers); 
//BINDFUNC(int          ,SDL_GetRenderDriverInfo, int , SDL_RendererInfo* ); 
//BINDFUNC(SDL_Renderer*,SDL_CreateRenderer,          SDL_Window*, int , Uint32 ); 
//BINDFUNC(SDL_Renderer*,SDL_CreateSoftwareRenderer,  SDL_Surface* );
//BINDFUNC(SDL_Renderer*,SDL_GetRenderer,             SDL_Window* );
//BINDFUNC(int          ,SDL_GetRendererInfo,         SDL_Renderer*, SDL_RendererInfo* );
//BINDFUNC(SDL_Texture* ,SDL_CreateTextureFromSurface,SDL_Renderer*, SDL_Surface* );
//BINDFUNC(SDL_Texture* ,SDL_CreateTexture,           SDL_Renderer*, Uint32  , int  , int  , int  );
//BINDFUNC(int          ,SDL_QueryTexture,            SDL_Texture*, Uint32* , int* , int* , int* );
//BINDFUNC(int          ,SDL_SetTextureColorMod,      SDL_Texture*, Uint8  , Uint8  , Uint8  );
//BINDFUNC(int          ,SDL_GetTextureColorMod,      SDL_Texture*, Uint8* , Uint8* , Uint8* ); 
//BINDFUNC(int          ,SDL_SetTextureAlphaMod,      SDL_Texture*, Uint8  );
//BINDFUNC(int          ,SDL_GetTextureAlphaMod,      SDL_Texture*, Uint8* ); 
//BINDFUNC(int          ,SDL_SetTextureBlendMode,     SDL_Texture*, SDL_BlendMode  );
//BINDFUNC(int          ,SDL_GetTextureBlendMode,     SDL_Texture*, SDL_BlendMode* ); 
//BINDFUNC(int          ,SDL_UpdateTexture,           SDL_Texture*, const SDL_Rect*, const void* , int ); 
//BINDFUNC(int          ,SDL_LockTexture,             SDL_Texture*, const SDL_Rect* , void **, int *);
//BINDFUNC(void         ,SDL_UnlockTexture,           SDL_Texture*   ); 
//BINDFUNC(int          ,SDL_RenderSetViewport,       SDL_Renderer*, const SDL_Rect * );
//BINDFUNC(void         ,SDL_RenderGetViewport,       SDL_Renderer*, SDL_Rect * );
//BINDFUNC(int          ,SDL_SetRenderDrawColor,      SDL_Renderer*, Uint8 , Uint8 , Uint8 , Uint8 ); 
//BINDFUNC(int          ,SDL_GetRenderDrawColor,      SDL_Renderer*, Uint8* , Uint8* , Uint8* , Uint8* ); 
//BINDFUNC(int          ,SDL_SetRenderDrawBlendMode,  SDL_Renderer*, SDL_BlendMode  ); 
//BINDFUNC(int          ,SDL_GetRenderDrawBlendMode,  SDL_Renderer*, SDL_BlendMode* ); 
//BINDFUNC(int          ,SDL_RenderClear,             SDL_Renderer*  ); 
//BINDFUNC(int          ,SDL_RenderDrawPoint,         SDL_Renderer*, int , int ); 
//BINDFUNC(int          ,SDL_RenderDrawPoints,        SDL_Renderer*, const SDL_Point * , int ); 
//BINDFUNC(int          ,SDL_RenderDrawLine,          SDL_Renderer*, int , int , int , int ); 
//BINDFUNC(int          ,SDL_RenderDrawLines,         SDL_Renderer*, const SDL_Point * , int ); 
//BINDFUNC(int          ,SDL_RenderDrawRect,          SDL_Renderer*, const SDL_Rect * ); 
//BINDFUNC(int          ,SDL_RenderDrawRects,         SDL_Renderer*, const SDL_Rect * , int ); 
//BINDFUNC(int          ,SDL_RenderFillRect,          SDL_Renderer*, const SDL_Rect * ); 
//BINDFUNC(int          ,SDL_RenderFillRects,         SDL_Renderer*, const SDL_Rect * , int ); 
//BINDFUNC(int          ,SDL_RenderCopy,              SDL_Renderer*, SDL_Texture*, const SDL_Rect* , const SDL_Rect * );
//BINDFUNC(int          ,SDL_RenderReadPixels,        SDL_Renderer*, const SDL_Rect* , Uint32 , void *, int );
//BINDFUNC(void         ,SDL_RenderPresent,           SDL_Renderer* );
//BINDFUNC(void         ,SDL_DestroyTexture,          SDL_Texture*  );
//BINDFUNC(void         ,SDL_DestroyRenderer,         SDL_Renderer* );
BINDFUNC(Uint32     ,SDL_GetTicks);
//BINDFUNC(Uint64     ,SDL_GetPerformanceCounter);
//BINDFUNC(Uint64     ,SDL_GetPerformanceFrequency);
BINDFUNC(void         ,SDL_Delay, Uint32 );
//BINDFUNC(SDL_TimerID  ,SDL_AddTimer, Uint32 , SDL_TimerCallback , void *);
BINDFUNC(SDL_bool     ,SDL_RemoveTimer,             SDL_TimerID );
//BINDFUNC(void         ,SDL_GetVersion,              SDL_version* );
//BINDFUNC(const char*  ,SDL_GetRevision);
//BINDFUNC(int          ,SDL_GetRevisionNumber);
BINDFUNC(const SDL_VideoInfo*,SDL_GetVideoInfo);
BINDFUNC(const SDL_version*  ,SDL_Linked_Version);
//BINDFUNC(const char*         ,SDL_AudioDriverName, char *, int );
//BINDFUNC(const char*         ,SDL_VideoDriverName, char *, int );
BINDFUNC(int                 ,SDL_VideoModeOK, int , int , int , Uint32 );
//BINDFUNC(SDL_Rect**          ,SDL_ListModes, const SDL_PixelFormat * , Uint32 );
BINDFUNC(SDL_Surface*        ,SDL_SetVideoMode, int , int , int , Uint32 );
BINDFUNC(SDL_Surface*        ,SDL_GetVideoSurface);
BINDFUNC(void                ,SDL_UpdateRects, SDL_Surface * , int , SDL_Rect * );
BINDFUNC(void                ,SDL_UpdateRect, SDL_Surface * , int32_t , int32_t , Uint32 , Uint32 );
BINDFUNC(int                 ,SDL_Flip, SDL_Surface * );
BINDFUNC(int                 ,SDL_SetAlpha, SDL_Surface * , Uint32 , Uint8 );
BINDFUNC(SDL_Surface*        ,SDL_DisplayFormat, SDL_Surface * );
BINDFUNC(SDL_Surface*        ,SDL_DisplayFormatAlpha, SDL_Surface * );
BINDFUNC(void                ,SDL_WM_SetCaption, const char *, const char *);
//BINDFUNC(void                ,SDL_WM_GetCaption,const char **, const char **);
BINDFUNC(void                ,SDL_WM_SetIcon, SDL_Surface * , Uint8 * );
BINDFUNC(int                 ,SDL_WM_IconifyWindow);
BINDFUNC(int                 ,SDL_WM_ToggleFullScreen, SDL_Surface * );
BINDFUNC(SDL_GrabMode        ,SDL_WM_GrabInput, SDL_GrabMode );
//BINDFUNC(int                 ,SDL_SetPalette,SDL_Surface*, int , const SDL_Color* , int , int );
//BINDFUNC(int                 ,SDL_SetColors,SDL_Surface*, const SDL_Color* , int , int );
//BINDFUNC(int                 ,SDL_GetWMInfo, SDL_SysWMinfo *);
BINDFUNC(Uint8             ,SDL_GetAppState);
BINDFUNC(void                ,SDL_WarpMouse, Uint16 , Uint16 );
BINDFUNC(SDL_Overlay*        ,SDL_CreateYUVOverlay, int , int , Uint32 , SDL_Surface * );
BINDFUNC(int                 ,SDL_LockYUVOverlay, SDL_Overlay * );
BINDFUNC(void                ,SDL_UnlockYUVOverlay, SDL_Overlay * );
BINDFUNC(int                 ,SDL_DisplayYUVOverlay, SDL_Overlay * , SDL_Rect * );
BINDFUNC(void                ,SDL_FreeYUVOverlay, SDL_Overlay * );
BINDFUNC(void                ,SDL_GL_SwapBuffers);
BINDFUNC(int                 ,SDL_SetGamma, float , float , float );
BINDFUNC(int                 ,SDL_SetGammaRamp, const Uint16 * , const Uint16 * , const Uint16 * );
BINDFUNC(int                 ,SDL_GetGammaRamp, Uint16 * , Uint16 * , Uint16 * );
BINDFUNC(int                 ,SDL_EnableKeyRepeat, int , int );
BINDFUNC(void                ,SDL_GetKeyRepeat, int *, int *);
BINDFUNC(int                 ,SDL_EnableUNICODE, int );
//BINDFUNC(int     ,SDL_SetTimer, Uint32 , SDL_OldTimerCallback );
BINDFUNC(int     ,SDL_putenv, const char* );
BINDFUNC(int     ,SDL_Init, Uint32 );
BINDFUNC(int     ,SDL_InitSubSystem, Uint32 );
BINDFUNC(void    ,SDL_QuitSubSystem, Uint32 );
BINDFUNC(Uint32,SDL_WasInit, Uint32 );
BINDFUNC(void    ,SDL_Quit);
//BINDFUNC(void    ,SDL_InstallParachute);
//BINDFUNC(void    ,SDL_UninstallParachute);
//BINDFUNC(int     ,SDL_AssertionsInit);
//BINDFUNC(void    ,SDL_AssertionsQuit);
//BINDFUNC(int     ,SDL_HapticInit);
//BINDFUNC(void    ,SDL_HapticQuit);
//BINDFUNC(int     ,SDL_JoystickInit);
//BINDFUNC(void    ,SDL_JoystickQuit);
//BINDFUNC(int     ,SDL_PrivateJoystickAxis,   SDL_Joystick*, Uint8 , int16_t );
//BINDFUNC(int     ,SDL_PrivateJoystickBall,   SDL_Joystick*, Uint8 , int16_t , int16_t );
//BINDFUNC(int     ,SDL_PrivateJoystickHat,    SDL_Joystick*, Uint8 , Uint8 );
//BINDFUNC(int     ,SDL_PrivateJoystickButton, SDL_Joystick*, Uint8 , Uint8 );
//BINDFUNC(int     ,SDL_PrivateJoystickValid,  SDL_Joystick **);
//BINDFUNC(void    ,SDL_StartTicks);
//BINDFUNC(int     ,SDL_TimerInit);
//BINDFUNC(void    ,SDL_TimerQuit);
//BINDFUNC(int     ,SDL_HelperWindowCreate);
//BINDFUNC(int     ,SDL_HelperWindowDestroy);
//BINDFUNC(void    ,SDL_SetError, const char *, ...);
BINDFUNC(char*   ,SDL_GetError);
BINDFUNC(void    ,SDL_ClearError);




void init_binding_SDL(lua_State *L) {
	int ffi = lua_gettop(L);

	//SDL
	FFI_CDEF_FILE("include/SDL_types.h");
	BEGIN_PACKAGE(sdl)
		//   extern  Uint8              SDL_numjoysticks;
BINDNAME(SDL_malloc);
BINDNAME(SDL_calloc);
BINDNAME(SDL_realloc);
BINDNAME(SDL_free);
BINDNAME(SDL_getenv);
//BINDNAME(SDL_setenv);
//BINDNAME(SDL_qsort);
BINDNAME(SDL_memset);
BINDNAME(SDL_memcpy);
BINDNAME(SDL_memmove);
BINDNAME(SDL_memcmp);
BINDNAME(SDL_strlen);
//BINDNAME(SDL_wcslen);
//BINDNAME(SDL_wcslcpy);
//BINDNAME(SDL_wcslcat);
//BINDNAME(SDL_strlcpy);
//BINDNAME(SDL_utf8strlcpy);
//BINDNAME(SDL_strlcat);
BINDNAME(SDL_strdup);
BINDNAME(SDL_strrev);
BINDNAME(SDL_strupr);
BINDNAME(SDL_strlwr);
//BINDNAME(SDL_strchr);
//BINDNAME(SDL_strrchr);
//BINDNAME(SDL_strstr);
//BINDNAME(SDL_ltoa);
//BINDNAME(SDL_ultoa);
//BINDNAME(SDL_strtol);
//BINDNAME(SDL_strtoul);
//BINDNAME(SDL_lltoa);
//BINDNAME(SDL_ulltoa);
//BINDNAME(SDL_strtoll);
//BINDNAME(SDL_strtoull);
//BINDNAME(SDL_strtod);
//BINDNAME(SDL_strcmp);
//BINDNAME(SDL_strncmp);
//BINDNAME(SDL_strcasecmp);
//BINDNAME(SDL_strncasecmp);
//BINDNAME(SDL_sscanf);
//BINDNAME(SDL_snprintf);
//BINDNAME(SDL_vsnprintf);
//BINDNAME(SDL_atan);
//BINDNAME(SDL_atan2);
//BINDNAME(SDL_copysign);
//BINDNAME(SDL_cos);
//BINDNAME(SDL_fabs);
//BINDNAME(SDL_floor);
//BINDNAME(SDL_log);
//BINDNAME(SDL_pow);
//BINDNAME(SDL_scalbn);
//BINDNAME(SDL_sin);
//BINDNAME(SDL_sqrt);
//BINDNAME(SDL_iconv_open);
BINDNAME(SDL_iconv_close);
BINDNAME(SDL_iconv);
BINDNAME(SDL_iconv_string);
//BINDNAME(SDL_main);
//BINDNAME(SDL_RegisterApp);
//BINDNAME(SDL_UnregisterApp);
//BINDFUNC(const char*           ,SDL_GetPlatform);
//BINDFUNC(SDL_assert_state      ,SDL_ReportAssertion,      SDL_assert_data *, const char *, const char *, int);
//BINDFUNC(void                  ,SDL_SetAssertionHandler, SDL_AssertionHandler , void *);
//BINDFUNC(const SDL_assert_data*,SDL_GetAssertionReport);
//BINDFUNC(void                  ,SDL_ResetAssertionReport);
//BINDNAME(SDL_CreateThread);
//BINDNAME(SDL_ThreadID);
//BINDNAME(SDL_GetThreadID);
//BINDNAME(SDL_SetThreadPriority);
//BINDNAME(SDL_WaitThread);
//BINDNAME(SDL_RWFromFile);
//BINDNAME(SDL_RWFromFP);
//BINDNAME(SDL_RWFromMem);
//BINDNAME(SDL_RWFromConstMem);
//BINDNAME(SDL_AllocRW);
//BINDNAME(SDL_FreeRW);
//BINDNAME(SDL_ReadLE16);
//BINDNAME(SDL_ReadBE16);
//BINDNAME(SDL_ReadLE32);
//BINDNAME(SDL_ReadBE32);
//BINDNAME(SDL_ReadLE64);
//BINDNAME(SDL_ReadBE64);
//BINDNAME(SDL_WriteLE16);
//BINDNAME(SDL_WriteBE16);
//BINDNAME(SDL_WriteLE32);
//BINDNAME(SDL_WriteBE32);
//BINDNAME(SDL_WriteLE64);
//BINDNAME(SDL_WriteBE64);
//BINDFUNC(int                   ,SDL_GetNumAudioDrivers);
//BINDFUNC(const char*           ,SDL_GetAudioDriver, int );
BINDNAME(SDL_AudioInit);
BINDNAME(SDL_AudioQuit);
//BINDFUNC(const char*           ,SDL_GetCurrentAudioDriver);
BINDNAME(SDL_OpenAudio);
//BINDFUNC(int                   ,SDL_GetNumAudioDevices, int );
//BINDNAME(SDL_GetAudioDeviceName);
//BINDFUNC(SDL_AudioDeviceID     ,SDL_OpenAudioDevice, const char* , int , const SDL_AudioSpec* , SDL_AudioSpec *, int );
BINDNAME(SDL_GetAudioStatus);
//BINDFUNC(SDL_audiostatus       ,SDL_GetAudioDeviceStatus, SDL_AudioDeviceID );
BINDNAME(SDL_PauseAudio);
//BINDFUNC(void                  ,SDL_PauseAudioDevice, SDL_AudioDeviceID , int );
BINDNAME(SDL_LoadWAV_RW);
BINDNAME(SDL_FreeWAV);
//BINDNAME(SDL_BuildAudioCVT);
BINDNAME(SDL_ConvertAudio);
BINDNAME(SDL_MixAudio);
//BINDFUNC(void                  ,SDL_MixAudioFormat, Uint8* , const Uint8* , SDL_AudioFormat , Uint32 , int );
BINDNAME(SDL_LockAudio);
//BINDFUNC(void                  ,SDL_LockAudioDevice, SDL_AudioDeviceID );
BINDNAME(SDL_UnlockAudio);
//BINDFUNC(void                  ,SDL_UnlockAudioDevice, SDL_AudioDeviceID );
BINDNAME(SDL_CloseAudio);
//BINDFUNC(void                  ,SDL_CloseAudioDevice, SDL_AudioDeviceID );
//BINDFUNC(int                   ,SDL_AudioDeviceConnected, SDL_AudioDeviceID );
//BINDFUNC(int                   ,SDL_SetClipboardText, const char *);
//BINDFUNC(char*                 ,SDL_GetClipboardText);
//BINDFUNC(SDL_bool              ,SDL_HasClipboardText);
//BINDFUNC(int                   ,SDL_GetCPUCount);
//BINDFUNC(int                   ,SDL_GetCPUCacheLineSize);
BINDNAME(SDL_HasRDTSC);
BINDNAME(SDL_HasAltiVec);
BINDNAME(SDL_HasMMX);
BINDNAME(SDL_Has3DNow);
BINDNAME(SDL_HasSSE);
BINDNAME(SDL_HasSSE2);
//BINDFUNC(SDL_bool              ,SDL_HasSSE3);
//BINDFUNC(SDL_bool              ,SDL_HasSSE41);
//BINDFUNC(SDL_bool              ,SDL_HasSSE42);
//BINDNAME(SDL_GetPixelFormatName);
//BINDNAME(SDL_PixelFormatEnumToMasks); 
//BINDNAME(SDL_MasksToPixelFormatEnum); 
//BINDNAME(SDL_AllocFormat);
//BINDNAME(SDL_FreeFormat);
//BINDNAME(SDL_AllocPalette);
//BINDNAME(SDL_SetPixelFormatPalette);
//BINDNAME(SDL_SetPaletteColors);
//BINDNAME(SDL_FreePalette);
BINDNAME(SDL_MapRGB);
BINDNAME(SDL_MapRGBA);
BINDNAME(SDL_GetRGB);
BINDNAME(SDL_GetRGBA);
//BINDNAME(SDL_CalculateGammaRamp);
//BINDNAME(SDL_HasIntersection);
//BINDNAME(SDL_IntersectRect);
//BINDNAME(SDL_UnionRect);
//BINDNAME(SDL_EnclosePoints);
//BINDNAME(SDL_IntersectRectAndLine);
BINDNAME(SDL_CreateRGBSurface);
BINDNAME(SDL_CreateRGBSurfaceFrom);
BINDNAME(SDL_FreeSurface);
//BINDNAME(SDL_SetSurfacePalette); 
BINDNAME(SDL_LockSurface);
BINDNAME(SDL_UnlockSurface);
BINDNAME(SDL_LoadBMP_RW); 
BINDNAME(SDL_SaveBMP_RW);
//BINDNAME(SDL_SetSurfaceRLE);
BINDNAME(SDL_SetColorKey);
//BINDNAME(SDL_GetColorKey);
//BINDNAME(SDL_SetSurfaceColorMod);
//BINDNAME(SDL_GetSurfaceColorMod);
//BINDNAME(SDL_SetSurfaceAlphaMod); 
//BINDNAME(SDL_GetSurfaceAlphaMod); 
//BINDNAME(SDL_SetSurfaceBlendMode);
//BINDNAME(SDL_GetSurfaceBlendMode); 
BINDNAME(SDL_SetClipRect);
BINDNAME(SDL_GetClipRect); 
BINDNAME(SDL_ConvertSurface);
//BINDNAME(SDL_ConvertSurfaceFormat); 
BINDNAME(SDL_FillRect);
//BINDNAME(SDL_FillRects);
BINDNAME(SDL_UpperBlit);
BINDNAME(SDL_LowerBlit);
BINDNAME(SDL_SoftStretch);
//BINDNAME(SDL_UpperBlitScaled); 
//BINDNAME(SDL_LowerBlitScaled);
//BINDNAME(SDL_ConvertPixels);
//BINDFUNC(int             ,SDL_GetNumVideoDrivers);
//BINDFUNC(const char*     ,SDL_GetVideoDriver, int ); 
//BINDNAME(SDL_VideoInit); 
//BINDNAME(SDL_VideoQuit); 
//BINDFUNC(const char*     ,SDL_GetCurrentVideoDriver); 
//BINDFUNC(int             ,SDL_GetNumVideoDisplays); 
//BINDFUNC(int             ,SDL_GetDisplayBounds, int , SDL_Rect * );
//BINDFUNC(int             ,SDL_GetNumDisplayModes, int ); 
//BINDFUNC(int             ,SDL_GetDisplayMode, int , int , SDL_DisplayMode * );
//BINDFUNC(int             ,SDL_GetDesktopDisplayMode, int , SDL_DisplayMode * ); 
//BINDFUNC(int             ,SDL_GetCurrentDisplayMode, int , SDL_DisplayMode * ); 
//BINDFUNC(SDL_DisplayMode*,SDL_GetClosestDisplayMode, int , const SDL_DisplayMode * , SDL_DisplayMode * );
//BINDFUNC(int           ,SDL_GetWindowDisplay,         SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowDisplayMode,     SDL_Window*, const SDL_DisplayMode* );
//BINDFUNC(int           ,SDL_GetWindowDisplayMode,     SDL_Window*,       SDL_DisplayMode* );
//BINDFUNC(Uint32      ,SDL_GetWindowPixelFormat,     SDL_Window*  );
//BINDFUNC(SDL_Window*   ,SDL_CreateWindow, const char* , int , int , int , int , Uint32 );
//BINDFUNC(SDL_Window*   ,SDL_CreateWindowFrom, const void*  );
//BINDFUNC(Uint32      ,SDL_GetWindowID,              SDL_Window*  );
//BINDFUNC(SDL_Window*   ,SDL_GetWindowFromID, Uint32 id );
//BINDFUNC(Uint32      ,SDL_GetWindowFlags,           SDL_Window*  );
//BINDFUNC(void          ,SDL_SetWindowTitle,           SDL_Window*, const char* );
//BINDFUNC(const char*   ,SDL_GetWindowTitle,           SDL_Window*  );
//BINDFUNC(void          ,SDL_SetWindowIcon,            SDL_Window*, SDL_Surface* );
//BINDFUNC(void*         ,SDL_SetWindowData,            SDL_Window*, const char* , void* );
//BINDFUNC(void*         ,SDL_GetWindowData,            SDL_Window*, const char* );
//BINDFUNC(void          ,SDL_SetWindowPosition,        SDL_Window*, int  , int  );
//BINDFUNC(void          ,SDL_GetWindowPosition,        SDL_Window*, int* , int* );
//BINDFUNC(void          ,SDL_SetWindowSize,            SDL_Window*, int  , int  );
//BINDFUNC(void          ,SDL_GetWindowSize,            SDL_Window*, int *, int *);
//BINDFUNC(void          ,SDL_ShowWindow,               SDL_Window*  );
//BINDFUNC(void          ,SDL_HideWindow,               SDL_Window*  );
//BINDFUNC(void          ,SDL_RaiseWindow,              SDL_Window*  );
//BINDFUNC(void          ,SDL_MaximizeWindow,           SDL_Window*  );
//BINDFUNC(void          ,SDL_MinimizeWindow,           SDL_Window*  );
//BINDFUNC(void          ,SDL_RestoreWindow,            SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowFullscreen,      SDL_Window*, SDL_bool );
//BINDFUNC(SDL_Surface*  ,SDL_GetWindowSurface,         SDL_Window*  );
//BINDFUNC(int           ,SDL_UpdateWindowSurface,      SDL_Window*  );
//BINDFUNC(int           ,SDL_UpdateWindowSurfaceRects, SDL_Window*, SDL_Rect * , int );
//BINDFUNC(void          ,SDL_SetWindowGrab,            SDL_Window*, SDL_bool );
//BINDFUNC(SDL_bool      ,SDL_GetWindowGrab,            SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowBrightness,      SDL_Window*, float );
//BINDFUNC(float         ,SDL_GetWindowBrightness,      SDL_Window*  );
//BINDFUNC(int           ,SDL_SetWindowGammaRamp,       SDL_Window*, const Uint16*,const Uint16*,const Uint16*);
//BINDFUNC(int           ,SDL_GetWindowGammaRamp,       SDL_Window*,       Uint16*,      Uint16*,      Uint16*);
//BINDFUNC(void          ,SDL_DestroyWindow,            SDL_Window* );
//BINDFUNC(SDL_bool      ,SDL_IsScreenSaverEnabled);
//BINDFUNC(void          ,SDL_EnableScreenSaver);
//BINDFUNC(void          ,SDL_DisableScreenSaver);
BINDNAME(SDL_GL_LoadLibrary);
BINDNAME(SDL_GL_GetProcAddress);
//BINDNAME(SDL_GL_UnloadLibrary);
//BINDNAME(SDL_GL_ExtensionSupported);
BINDNAME(SDL_GL_SetAttribute);
BINDNAME(SDL_GL_GetAttribute);
//BINDFUNC(SDL_GLContext  ,SDL_GL_CreateContext, SDL_Window* );
//BINDFUNC(int            ,SDL_GL_MakeCurrent, SDL_Window * , SDL_GLContext );
//BINDNAME(SDL_GL_SetSwapInterval);
//BINDNAME(SDL_GL_GetSwapInterval);
//BINDFUNC(void           ,SDL_GL_SwapWindow, SDL_Window * );
//BINDFUNC(void           ,SDL_GL_DeleteContext, SDL_GLContext );
//BINDFUNC(SDL_Window*    ,SDL_GetKeyboardFocus);
//BINDNAME(SDL_GetKeyboardState);
BINDNAME(SDL_GetModState);
BINDNAME(SDL_SetModState);
//BINDFUNC(SDLKey    ,SDL_GetKeyFromScancode, SDL_Scancode );
//BINDFUNC(SDL_Scancode   ,SDL_GetScancodeFromKey, SDLKey );
//BINDNAME(SDL_GetScancodeName);
BINDNAME(SDL_GetKeyName);
//BINDNAME(SDL_StartTextInput);
//BINDNAME(SDL_StopTextInput);
//BINDNAME(SDL_SetTextInputRect);
//BINDFUNC(SDL_Window*    ,SDL_GetMouseFocus);
BINDNAME(SDL_GetMouseState);
BINDNAME(SDL_GetRelativeMouseState);
//BINDFUNC(void           ,SDL_WarpMouseInWindow, SDL_Window * , int , int );
//BINDNAME(SDL_SetRelativeMouseMode);
//BINDNAME(SDL_GetRelativeMouseMode);
//BINDNAME(SDL_CreateCursor); 
//BINDNAME(SDL_CreateColorCursor); 
BINDNAME(SDL_SetCursor);
BINDNAME(SDL_GetCursor);
BINDNAME(SDL_FreeCursor);
BINDNAME(SDL_ShowCursor);
BINDNAME(SDL_NumJoysticks);
BINDNAME(SDL_JoystickUpdate);
BINDNAME(SDL_JoystickEventState);
BINDNAME(SDL_JoystickName);
BINDNAME(SDL_JoystickOpen);
BINDNAME(SDL_JoystickOpened);
BINDNAME(SDL_JoystickIndex);
BINDNAME(SDL_JoystickNumAxes);
BINDNAME(SDL_JoystickNumBalls);
BINDNAME(SDL_JoystickNumHats);
BINDNAME(SDL_JoystickNumButtons);
BINDNAME(SDL_JoystickGetAxis);
BINDNAME(SDL_JoystickGetHat); 
BINDNAME(SDL_JoystickGetBall); 
BINDNAME(SDL_JoystickGetButton); 
BINDNAME(SDL_JoystickClose);
//BINDFUNC(SDL_Touch*     ,SDL_GetTouch, SDL_TouchID );
//BINDFUNC(SDL_Finger*    ,SDL_GetFinger, SDL_Touch *, SDL_FingerID );
//BINDFUNC(int            ,SDL_RecordGesture, SDL_TouchID );
//BINDFUNC(int            ,SDL_SaveAllDollarTemplates, SDL_RWops *);
//BINDFUNC(int            ,SDL_SaveDollarTemplate, SDL_GestureID , SDL_RWops *);
//BINDFUNC(int            ,SDL_LoadDollarTemplates, SDL_TouchID , SDL_RWops *);
BINDNAME(SDL_PumpEvents);
BINDNAME(SDL_PeepEvents); 
//BINDNAME(SDL_HasEvent);
//BINDNAME(SDL_HasEvents); 
//BINDNAME(SDL_FlushEvent);
//BINDNAME(SDL_FlushEvents); 
BINDNAME(SDL_PollEvent); 
BINDNAME(SDL_WaitEvent); 
//BINDNAME(SDL_WaitEventTimeout); 
BINDNAME(SDL_PushEvent); 
//BINDNAME(SDL_SetEventFilter); 
//BINDNAME(SDL_GetEventFilter); 
//BINDNAME(SDL_AddEventWatch); 
//BINDNAME(SDL_DelEventWatch); 
//BINDNAME(SDL_FilterEvents);
BINDNAME(SDL_EventState);
//BINDNAME(SDL_RegisterEvents);
//BINDNAME(SDL_SetHintWithPriority); 
//BINDNAME(SDL_SetHint); 
//BINDNAME(SDL_GetHint);
//BINDNAME(SDL_ClearHints);
BINDNAME(SDL_LoadObject);
BINDNAME(SDL_LoadFunction);
BINDNAME(SDL_UnloadObject);
//BINDFUNC(void           ,SDL_LogSetAllPriority,   SDL_LogPriority ); 
//BINDFUNC(void           ,SDL_LogSetPriority, int , SDL_LogPriority ); 
//BINDFUNC(SDL_LogPriority,SDL_LogGetPriority, int );
//BINDFUNC(void           ,SDL_LogResetPriorities);
//BINDFUNC(void           ,SDL_Log, const char *, ...);
//BINDFUNC(void           ,SDL_LogVerbose, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogDebug, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogInfo, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogWarn, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogError, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogCritical, int , const char *, ...);
//BINDFUNC(void           ,SDL_LogMessage, int , SDL_LogPriority, const char *, ... );
//BINDFUNC(void           ,SDL_LogMessageV, int , SDL_LogPriority, const char *, va_list );
//BINDFUNC(void           ,SDL_LogGetOutputFunction, SDL_LogOutputFunction *, void **);
//BINDFUNC(void           ,SDL_LogSetOutputFunction, SDL_LogOutputFunction , void *);
//BINDFUNC(SDL_PowerState ,SDL_GetPowerInfo, int *, int *);
//BINDNAME(SDL_GetNumRenderDrivers); 
//BINDNAME(SDL_GetRenderDriverInfo); 
//BINDFUNC(SDL_Renderer*,SDL_CreateRenderer,          SDL_Window*, int , Uint32 ); 
//BINDFUNC(SDL_Renderer*,SDL_CreateSoftwareRenderer,  SDL_Surface* );
//BINDFUNC(SDL_Renderer*,SDL_GetRenderer,             SDL_Window* );
//BINDFUNC(int          ,SDL_GetRendererInfo,         SDL_Renderer*, SDL_RendererInfo* );
//BINDFUNC(SDL_Texture* ,SDL_CreateTextureFromSurface,SDL_Renderer*, SDL_Surface* );
//BINDFUNC(SDL_Texture* ,SDL_CreateTexture,           SDL_Renderer*, Uint32  , int  , int  , int  );
//BINDFUNC(int          ,SDL_QueryTexture,            SDL_Texture*, Uint32* , int* , int* , int* );
//BINDFUNC(int          ,SDL_SetTextureColorMod,      SDL_Texture*, Uint8  , Uint8  , Uint8  );
//BINDFUNC(int          ,SDL_GetTextureColorMod,      SDL_Texture*, Uint8* , Uint8* , Uint8* ); 
//BINDFUNC(int          ,SDL_SetTextureAlphaMod,      SDL_Texture*, Uint8  );
//BINDFUNC(int          ,SDL_GetTextureAlphaMod,      SDL_Texture*, Uint8* ); 
//BINDFUNC(int          ,SDL_SetTextureBlendMode,     SDL_Texture*, SDL_BlendMode  );
//BINDFUNC(int          ,SDL_GetTextureBlendMode,     SDL_Texture*, SDL_BlendMode* ); 
//BINDFUNC(int          ,SDL_UpdateTexture,           SDL_Texture*, const SDL_Rect*, const void* , int ); 
//BINDFUNC(int          ,SDL_LockTexture,             SDL_Texture*, const SDL_Rect* , void **, int *);
//BINDFUNC(void         ,SDL_UnlockTexture,           SDL_Texture*   ); 
//BINDFUNC(int          ,SDL_RenderSetViewport,       SDL_Renderer*, const SDL_Rect * );
//BINDFUNC(void         ,SDL_RenderGetViewport,       SDL_Renderer*, SDL_Rect * );
//BINDFUNC(int          ,SDL_SetRenderDrawColor,      SDL_Renderer*, Uint8 , Uint8 , Uint8 , Uint8 ); 
//BINDFUNC(int          ,SDL_GetRenderDrawColor,      SDL_Renderer*, Uint8* , Uint8* , Uint8* , Uint8* ); 
//BINDFUNC(int          ,SDL_SetRenderDrawBlendMode,  SDL_Renderer*, SDL_BlendMode  ); 
//BINDFUNC(int          ,SDL_GetRenderDrawBlendMode,  SDL_Renderer*, SDL_BlendMode* ); 
//BINDFUNC(int          ,SDL_RenderClear,             SDL_Renderer*  ); 
//BINDFUNC(int          ,SDL_RenderDrawPoint,         SDL_Renderer*, int , int ); 
//BINDFUNC(int          ,SDL_RenderDrawPoints,        SDL_Renderer*, const SDL_Point * , int ); 
//BINDFUNC(int          ,SDL_RenderDrawLine,          SDL_Renderer*, int , int , int , int ); 
//BINDFUNC(int          ,SDL_RenderDrawLines,         SDL_Renderer*, const SDL_Point * , int ); 
//BINDFUNC(int          ,SDL_RenderDrawRect,          SDL_Renderer*, const SDL_Rect * ); 
//BINDFUNC(int          ,SDL_RenderDrawRects,         SDL_Renderer*, const SDL_Rect * , int ); 
//BINDFUNC(int          ,SDL_RenderFillRect,          SDL_Renderer*, const SDL_Rect * ); 
//BINDFUNC(int          ,SDL_RenderFillRects,         SDL_Renderer*, const SDL_Rect * , int ); 
//BINDFUNC(int          ,SDL_RenderCopy,              SDL_Renderer*, SDL_Texture*, const SDL_Rect* , const SDL_Rect * );
//BINDFUNC(int          ,SDL_RenderReadPixels,        SDL_Renderer*, const SDL_Rect* , Uint32 , void *, int );
//BINDFUNC(void         ,SDL_RenderPresent,           SDL_Renderer* );
//BINDFUNC(void         ,SDL_DestroyTexture,          SDL_Texture*  );
//BINDFUNC(void         ,SDL_DestroyRenderer,         SDL_Renderer* );
BINDNAME(SDL_GetTicks);
//BINDNAME(SDL_GetPerformanceCounter);
//BINDNAME(SDL_GetPerformanceFrequency);
BINDNAME(SDL_Delay);
//BINDNAME(SDL_AddTimer);
BINDNAME(SDL_RemoveTimer);
//BINDNAME(SDL_GetVersion);
//BINDNAME(SDL_GetRevision);
//BINDNAME(SDL_GetRevisionNumber);
BINDNAME(SDL_GetVideoInfo);
BINDNAME(SDL_Linked_Version);
//BINDNAME(SDL_AudioDriverName);
//BINDNAME(SDL_VideoDriverName);
BINDNAME(SDL_VideoModeOK);
//BINDNAME(SDL_ListModes);
BINDNAME(SDL_SetVideoMode);
BINDNAME(SDL_GetVideoSurface);
BINDNAME(SDL_UpdateRects);
BINDNAME(SDL_UpdateRect);
BINDNAME(SDL_Flip);
BINDNAME(SDL_SetAlpha);
BINDNAME(SDL_DisplayFormat);
BINDNAME(SDL_DisplayFormatAlpha);
BINDNAME(SDL_WM_SetCaption);
//BINDNAME(SDL_WM_GetCaption);
BINDNAME(SDL_WM_SetIcon);
BINDNAME(SDL_WM_IconifyWindow);
BINDNAME(SDL_WM_ToggleFullScreen);
BINDNAME(SDL_WM_GrabInput);
//BINDNAME(SDL_SetPalette);
//BINDNAME(SDL_SetColors);
//BINDNAME(SDL_GetWMInfo);
BINDNAME(SDL_GetAppState);
BINDNAME(SDL_WarpMouse);
BINDNAME(SDL_CreateYUVOverlay);
BINDNAME(SDL_LockYUVOverlay);
BINDNAME(SDL_UnlockYUVOverlay);
BINDNAME(SDL_DisplayYUVOverlay);
BINDNAME(SDL_FreeYUVOverlay);
BINDNAME(SDL_GL_SwapBuffers);
BINDNAME(SDL_SetGamma);
BINDNAME(SDL_SetGammaRamp);
BINDNAME(SDL_GetGammaRamp);
BINDNAME(SDL_EnableKeyRepeat);
BINDNAME(SDL_GetKeyRepeat);
BINDNAME(SDL_EnableUNICODE);
//BINDNAME(SDL_SetTimer);
BINDNAME(SDL_putenv);
BINDNAME(SDL_Init);
BINDNAME(SDL_InitSubSystem);
BINDNAME(SDL_QuitSubSystem);
BINDNAME(SDL_WasInit);
BINDNAME(SDL_Quit);
//BINDNAME(SDL_InstallParachute);
//BINDNAME(SDL_UninstallParachute);
//BINDNAME(SDL_AssertionsInit);
//BINDNAME(SDL_AssertionsQuit);
//BINDNAME(SDL_HapticInit);
//BINDNAME(SDL_HapticQuit);
//BINDNAME(SDL_JoystickInit);
//BINDNAME(SDL_JoystickQuit);
//BINDNAME(SDL_PrivateJoystickAxis);
//BINDNAME(SDL_PrivateJoystickBall);
//BINDNAME(SDL_PrivateJoystickHat);
//BINDNAME(SDL_PrivateJoystickButton);
//BINDNAME(SDL_PrivateJoystickValid);
//BINDNAME(SDL_StartTicks);
//BINDNAME(SDL_TimerInit);
//BINDNAME(SDL_TimerQuit);
//BINDNAME(SDL_HelperWindowCreate);
//BINDNAME(SDL_HelperWindowDestroy);
//BINDNAME(SDL_SetError);
BINDNAME(SDL_GetError);
BINDNAME(SDL_ClearError);
	END_PACKAGE()

}
